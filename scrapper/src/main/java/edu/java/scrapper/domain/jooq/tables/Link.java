/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.domain.jooq.tables;

import edu.java.scrapper.domain.jooq.DefaultSchema;
import edu.java.scrapper.domain.jooq.Keys;
import edu.java.scrapper.domain.jooq.tables.records.LinkRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Link extends TableImpl<LinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINK</code>
     */
    public static final Link LINK = new Link();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinkRecord> getRecordType() {
        return LinkRecord.class;
    }

    /**
     * The column <code>LINK.ID</code>.
     */
    public final TableField<LinkRecord, Long> ID =
        createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>LINK.URI</code>.
     */
    public final TableField<LinkRecord, String> URI =
        createField(DSL.name("URI"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>LINK.DESCRIPTION</code>.
     */
    public final TableField<LinkRecord, String> DESCRIPTION =
        createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>LINK.CREATED_AT</code>.
     */
    public final TableField<LinkRecord, LocalDateTime> CREATED_AT =
        createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>LINK.UPDATED_AT</code>.
     */
    public final TableField<LinkRecord, LocalDateTime> UPDATED_AT =
        createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>LINK.CREATED_BY</code>.
     */
    public final TableField<LinkRecord, String> CREATED_BY =
        createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>LINK.UPDATED_BY</code>.
     */
    public final TableField<LinkRecord, String> UPDATED_BY =
        createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>LINK.TITLE</code>.
     */
    public final TableField<LinkRecord, String> TITLE =
        createField(DSL.name("TITLE"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>LINK.ETAG</code>.
     */
    public final TableField<LinkRecord, String> ETAG =
        createField(DSL.name("ETAG"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>LINK.LAST_CHECKED_AT</code>.
     */
    public final TableField<LinkRecord, LocalDateTime> LAST_CHECKED_AT = createField(DSL.name("LAST_CHECKED_AT"),
        SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.LOCALDATETIME)),
        this,
        ""
    );

    /**
     * The column <code>LINK.TYPE</code>.
     */
    public final TableField<LinkRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(16), this, "");

    private Link(Name alias, Table<LinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Link(Name alias, Table<LinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LINK</code> table reference
     */
    public Link(String alias) {
        this(DSL.name(alias), LINK);
    }

    /**
     * Create an aliased <code>LINK</code> table reference
     */
    public Link(Name alias) {
        this(alias, LINK);
    }

    /**
     * Create a <code>LINK</code> table reference
     */
    public Link() {
        this(DSL.name("LINK"), null);
    }

    public <O extends Record> Link(Table<O> child, ForeignKey<O, LinkRecord> key) {
        super(child, key, LINK);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<LinkRecord, Long> getIdentity() {
        return (Identity<LinkRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<LinkRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    @NotNull
    public List<UniqueKey<LinkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_23);
    }

    @Override
    @NotNull
    public Link as(String alias) {
        return new Link(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Link as(Name alias) {
        return new Link(alias, this);
    }

    @Override
    @NotNull
    public Link as(Table<?> alias) {
        return new Link(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(String name) {
        return new Link(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(Name name) {
        return new Link(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(Table<?> name) {
        return new Link(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row11<Long, String, String, LocalDateTime, LocalDateTime, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(
        Class<U> toType,
        Function11<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from
    ) {
        return convertFrom(toType, Records.mapping(from));
    }
}
